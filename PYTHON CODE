import cv2
import mediapipe as mp
import serial
import time

# Initialize serial communication with Arduino
arduino = serial.Serial('COM3', 9600)  # Replace 'COM3' with your port
time.sleep(2)  # Wait for the connection to initialize

# Initialize MediaPipe
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7)
mp_drawing = mp.solutions.drawing_utils

# Function to count open fingers
def count_fingers(landmarks):
    count = 0
    tips = [4, 8, 12, 16, 20]
    for tip in tips[1:]:  # Ignore thumb for simplicity
        if landmarks[tip].y < landmarks[tip - 2].y:  # Check if the fingertip is above the joint
            count += 1
    return count

# Start webcam
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Flip the frame horizontally for a mirror effect
    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(rgb_frame)

    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            # Draw hand landmarks
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            # Get landmarks and count fingers
            landmarks = hand_landmarks.landmark
            finger_count = count_fingers(landmarks)

            # Determine palm direction (left or right)
            palm_x = landmarks[9].x  # Use wrist position (landmark 9)
            if palm_x < 0.4:
                servo_direction = "L"  # Left
            elif palm_x > 0.6:
                servo_direction = "R"  # Right
            else:
                servo_direction = "C"  # Center

            # Send data to Arduino
            fan_speed = finger_count * 25  # Map finger count to fan speed (0-100)
            command = f"F{fan_speed}\nS{servo_direction}\n"
            arduino.write(command.encode())

            # Display feedback
            cv2.putText(frame, f"Fingers: {finger_count}", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)
            cv2.putText(frame, f"Palm: {servo_direction}", (10, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

    cv2.imshow("Hand Gesture Control", frame)

    if cv2.waitKey(1) & 0xFF == 27:  # Press 'Esc' to exit
        break

cap.release()
cv2.destroyAllWindows()
arduino.close()
